//
// Created by chke on 7/14/17.
//
#include <ros/ros.h>
#include <geometry_msgs/Vector3.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_broadcaster.h>
#include <sensor_msgs/JointState.h>
#include <boost/assign.hpp>

#include "serila_controller/serial_data_interactive.h"
#include "serila_controller/robot_fun_state.h"

#include "../include/serial.h"
#include "../include/serial_control.h"
#include "../include/serial_server_process.h"
#include "../include/cacl_odom.h"

#include "../include/debug.h"

extern  ROBOT_PARA robot_odom;

//static long int left_encoder_count = 0;
//static long int right_encoder_count = 0;
//static long int lspeed_encoder_count = 0;
//static long int rspeed_encoder_count = 0;
//
//int rcallbackcount = 0;
//float left_speed_cmd = 0.0;
//float right_speed_cmd = 0.0;
extern float left_speed;
extern float right_speed;

//位置
extern float px;
extern float py;
extern float theta;

//速度

extern float vx;
extern float vth;

bool wr_zero_speed = false;
extern bool pub_status;

extern double imu_yaw;



ros::Publisher cmd_vel_custom;

pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;

bool serial_data_server(serila_controller::serial_data_interactive::Request &req, serila_controller::serial_data_interactive::Response &res)
{
//    printf("exec server\n");
    return serial_server_process(req, res);
}


void cmd_vel_contreller(const geometry_msgs::Twist::ConstPtr& cmd_vel){
//    geometry_msgs::Twist msg_vel;

    if((std::abs(cmd_vel->angular.z) - 1.01)<0){
        geometry_msgs::Twist msg_vel;
        msg_vel.linear.x = cmd_vel->linear.x;
        if((cmd_vel->angular.z - 0) > 0){
            msg_vel.angular.z = 1.01;
        }else{
            msg_vel.angular.z = -1.01;
        }
        cmd_vel_custom.publish(msg_vel) ;
    }else{
        cmd_vel_custom.publish(cmd_vel) ;
    }


}



void* ReadIMUData(void* arg);

int main(int argc, char ** argv)
{

    int odom_fd = 0;
    int imu_fd = 0;

    pthread_t ThreadReadIMUData;
    if(pthread_create(&ThreadReadIMUData,NULL,ReadIMUData,NULL)<0)
        printf("create thread error\n");

    robot_odom.odom->right_odom = 0;
    robot_odom.odom->left_odom = 0;

    SerialControl serialControl;


    odom_fd = serialControl.open_serial_port(encord_serial);
    if (0 == odom_fd){
        serialControl.read_serial_task();
    }
//    Control.close_encoder_port();
    else{
        while (-1 == odom_fd)
        {
            odom_fd = serialControl.open_serial_port(1);
            sleep(1);
        }
        serialControl.read_serial_task();
    }

//    while (1);
    ros::Time current_time;

    ros::init(argc, argv, "serial_control_node");
    ros::NodeHandle n;

    tf::TransformBroadcaster odom_broadcaster;
    bool publish_tf;
    n.param("publish_tf", publish_tf, true);

    nav_msgs::Odometry odom;
    sensor_msgs::JointState joint_state;
    joint_state.name.resize(2);
    joint_state.position.resize(2);
    joint_state.velocity.resize(2);
    joint_state.name[0] = "left_wheel_joint";
    joint_state.name[1] = "right_wheel_joint";


    cmd_vel_custom = n.advertise<geometry_msgs::Twist>("/cmd_vel_contreller", 1);

    ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("/odom", 10);
    ros::Publisher joint_state_pub = n.advertise<sensor_msgs::JointState>("/joint_states", 10);
    ros::Publisher robot_fun_state_pub = n.advertise<serila_controller::robot_fun_state>("/robot_fun_state", 10);
    ros::Subscriber cmd_sub = n.subscribe<geometry_msgs::Twist>("/cmd_vel",1,cmd_vel_set);
//    ros::Subscriber cmd_custom_sub = n.subscribe<geometry_msgs::Twist>("/cmd_vel", 1, cmd_vel_contreller);

    ros::ServiceServer service = n.advertiseService("serial_data_server",serial_data_server);
    ROS_INFO("server ready");

    ros::Rate r(50);
    while (ros::ok())
    {
        DEBUG("imu_yaw is %f\n",imu_yaw);
        geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(theta);
        current_time = ros::Time::now();
        calc_odom();
//        DEBUG("hello debug %d %d\n",112, 111);
//        left_speed = robot_odom.odom->left_odom/20;
//        right_speed = robot_odom.odom->right_odom/20;

        if(publish_tf)
        {
            geometry_msgs::TransformStamped odom_trans;
            odom_trans.header.stamp = current_time;
            odom_trans.header.frame_id = "odom";
            odom_trans.child_frame_id = "base_footprint";

            odom_trans.transform.translation.x = px;
            odom_trans.transform.translation.y = py;
            odom_trans.transform.translation.z = 0.0;
            odom_trans.transform.rotation = odom_quat;

            odom_broadcaster.sendTransform(odom_trans);
        }

        odom.header.stamp = current_time;
        odom.header.frame_id = "odom";
        odom.child_frame_id = "base_footprint";

        odom.pose.pose.position.x = px;
        odom.pose.pose.position.y = py;
        odom.pose.pose.position.z = 0.0;
        odom.pose.pose.orientation = odom_quat;
        odom.pose.covariance =  boost::assign::list_of (1e-3)  (0) (0)  (0)  (0)  (0)
                (0) (1e-3)  (0)  (0)  (0)  (0)
                (0)   (0)  (1e6) (0)  (0)  (0)
                (0)   (0)   (0) (1e6) (0)  (0)
                (0)   (0)   (0)  (0) (1e6) (0)
                (0)   (0)   (0)  (0)  (0)  (1);
        odom.twist.twist.linear.x = vx;
        odom.twist.twist.linear.y = 0;
        odom.twist.twist.angular.z = vth;
        odom.twist.covariance =  boost::assign::list_of (1e-3)  (0) (0)  (0)  (0)  (0)
                (0) (1e-3)  (0)  (0)  (0)  (0)
                (0)   (0)  (1e6) (0)  (0)  (0)
                (0)   (0)   (0) (1e6) (0)  (0)
                (0)   (0)   (0)  (0) (1e6) (0)
                (0)   (0)   (0)  (0)  (0)  (1);
        odom_pub.publish(odom);

        joint_state.header.stamp = current_time;
        joint_state.position[0] = robot_odom.odom->left_odom / TICKSPERRADIAN;      //m
        joint_state.position[1] = robot_odom.odom->right_odom / TICKSPERRADIAN;     //m
        joint_state.velocity[0] = left_speed;
        joint_state.velocity[1] = right_speed;
        joint_state_pub.publish(joint_state);

        if (WaterSeat.pub_flag)
        {
            serila_controller::robot_fun_state gridState;
            gridState.device_name = "grid_status";
            gridState.para = WaterSeat.info_byte[0];
            robot_fun_state_pub.publish(gridState);
            WaterSeat.pub_flag = false;
//            pub_status = false;
            printf("WaterSeat.pub_flag %d\n",WaterSeat.pub_flag);

        }

        if (DoorState.pub_flag)
        {
            serila_controller::robot_fun_state doorState;
            doorState.device_name = "door_status";
            doorState.para = WaterSeat.info_byte[0];
            robot_fun_state_pub.publish(doorState);
            DoorState.pub_flag = false;
            printf("DoorState.pub_flag %d\n",WaterSeat.pub_flag);
//            pub_status = false;

        }
        ros::spinOnce();
        r.sleep();
    }

    wr_zero_speed =true;

    return 0;
}


int set_serial_port(int fd, int nSpeed, int nBits, char nEvent, int nStop)
{
    struct termios newtio, oldtio;
    if (fd < 0)
        return -1;
    if  ( tcgetattr(fd, &oldtio)  !=  0)
    {
        perror("SetupSerial 1");
        return -1;
    }
    bzero( &newtio, sizeof( newtio ) );
    newtio.c_cflag  |=  CLOCAL | CREAD;
    newtio.c_cflag &= ~CSIZE;

    switch( nBits )
    {
        case 7:
            newtio.c_cflag |= CS7;
            break;
        case 8:
            newtio.c_cflag |= CS8;
            break;
    }

    switch( nEvent )
    {
        case 'O':                     //奇校验
            newtio.c_cflag |= PARENB;
            newtio.c_cflag |= PARODD;
            newtio.c_iflag |= (INPCK | ISTRIP);
            break;
        case 'E':                     //偶校验
            newtio.c_iflag |= (INPCK | ISTRIP);
            newtio.c_cflag |= PARENB;
            newtio.c_cflag &= ~PARODD;
            break;
        case 'N':                    //无校验
            newtio.c_cflag &= ~PARENB;
            break;
    }

    switch( nSpeed )
    {
        case 2400:
            cfsetispeed(&newtio, B2400);
            cfsetospeed(&newtio, B2400);
            break;
        case 4800:
            cfsetispeed(&newtio, B4800);
            cfsetospeed(&newtio, B4800);
            break;
        case 9600:
            cfsetispeed(&newtio, B9600);
            cfsetospeed(&newtio, B9600);
            break;
        case 115200:
            cfsetispeed(&newtio, B115200);
            cfsetospeed(&newtio, B115200);
            break;
        default:
            cfsetispeed(&newtio, B9600);
            cfsetospeed(&newtio, B9600);
            break;
    }
    if( nStop == 1 )
    {
        newtio.c_cflag &=  ~CSTOPB;
    }
    else if ( nStop == 2 )
    {
        newtio.c_cflag |=  CSTOPB;
    }
    newtio.c_cc[VTIME]  = 0;
    newtio.c_cc[VMIN] = 0;
    tcflush(fd,TCIFLUSH);
    if((tcsetattr(fd,TCSANOW,&newtio))!=0)
    {
        perror("com set error");
        return -1;
    }
    printf("set done!\n");
    return 0;
}

void* ReadIMUData(void* arg){
    int serial_imu_fd = open("/dev/imu_serial",O_RDWR|O_NOCTTY|O_NDELAY);

    if(serial_imu_fd == -1){
        printf("open imu_serial fialure");
        return 0;
    }
    if (fcntl(serial_imu_fd, F_SETFL, 0)<0)
        printf("Fcntl failed!\n");
    else
        printf("fcntl=%d\n",fcntl(serial_imu_fd, F_SETFL,0));
    if (isatty(STDIN_FILENO) == 0)
        printf("standard input is not a terminal device\n");
    else
        printf("isatty success!\n");
    printf("fd-open = %d\n",serial_imu_fd);

    if(set_serial_port(serial_imu_fd,115200,8,'N',1)<0){
        printf("set imu_serial fialure");
        return 0;
    }
    tcflush(serial_imu_fd, TCIFLUSH);
    unsigned char imu_serial_data[18];
    unsigned char imu_serial_data_r[10];
    while(ros::ok()) {
        memset(imu_serial_data,0,18);
        memset(imu_serial_data_r,0,10);
        if (read(serial_imu_fd, imu_serial_data_r, 1) > 0 && imu_serial_data_r[0] == 0x7a) {
            if (read(serial_imu_fd, imu_serial_data_r, 1) > 0 && imu_serial_data_r[0] == 0x7b) {
                if (read(serial_imu_fd, imu_serial_data_r, 1) > 0 && imu_serial_data_r[0] == 0x12) {
                    for (int i = 0; i < 17; i++) {
                        read(serial_imu_fd, imu_serial_data_r, 1);
                        imu_serial_data[i] = imu_serial_data_r[0];
//                        printf("imu_serial_data %d is %x\n", i, imu_serial_data_r[0]);
                    }
                    imu_yaw = (double)(imu_serial_data[1]<<16|imu_serial_data[2]<<8|imu_serial_data[3])*2*3.14159/3600000;
                    printf("imu_yaw=%f\t%x,%x,%x\n",imu_yaw*(180/3.1415),imu_serial_data[1],imu_serial_data[2],imu_serial_data[3]);
                }
            }
        }
    }


}

